import { DataView64 } from '../../src/core/dataview64';

describe('DataView64', () => {
  describe('getUint64()', () => {
    test('should get Uint64 value from array buffer (little endian)', () => {
      const buf = new Uint8Array(8);
      let view = new DataView64(buf.buffer, 0);
      expect(view.getUint64(0, true)).toEqual(0);
      buf[0] = 0xff;
      buf[1] = 0x00;
      buf[2] = 0x00;
      buf[3] = 0x00;
      buf[4] = 0x00;
      buf[5] = 0x00;
      buf[6] = 0x00;
      buf[7] = 0x00;
      expect(view.getUint64(0, true)).toEqual(255);
      buf[0] = 0xff;
      buf[1] = 0xff;
      buf[2] = 0xff;
      buf[3] = 0xff;
      buf[4] = 0xff;
      buf[5] = 0xff;
      buf[6] = 0x1f;
      buf[7] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, true))).toEqual(true);
      expect(view.getUint64(0, true)).toEqual(Number.MAX_SAFE_INTEGER);
      buf[0] = 0x00;
      buf[1] = 0x00;
      buf[2] = 0x00;
      buf[3] = 0x00;
      buf[4] = 0x00;
      buf[5] = 0x00;
      buf[6] = 0x20;
      buf[7] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, true))).toEqual(false);
    });

    test('should get Uint64 value from array buffer (big endian)', () => {
      const buf = new Uint8Array(8);
      let view = new DataView64(buf.buffer, 0);
      expect(view.getUint64(0, false)).toEqual(0);
      buf[7] = 0xff;
      buf[6] = 0x00;
      buf[5] = 0x00;
      buf[4] = 0x00;
      buf[3] = 0x00;
      buf[2] = 0x00;
      buf[1] = 0x00;
      buf[0] = 0x00;
      expect(view.getUint64(0, false)).toEqual(255);
      buf[7] = 0xff;
      buf[6] = 0xff;
      buf[5] = 0xff;
      buf[4] = 0xff;
      buf[3] = 0xff;
      buf[2] = 0xff;
      buf[1] = 0x1f;
      buf[0] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, false))).toEqual(true);
      expect(view.getUint64(0, false)).toEqual(Number.MAX_SAFE_INTEGER);
      buf[7] = 0x00;
      buf[6] = 0x00;
      buf[5] = 0x00;
      buf[4] = 0x00;
      buf[3] = 0x00;
      buf[2] = 0x00;
      buf[1] = 0x20;
      buf[0] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, false))).toEqual(false);
    });
  });

  describe('getInt64()', () => {
    test('should get Uint64 value from array buffer (little endian, positive)', () => {
      const buf = new Uint8Array(8);
      let view = new DataView64(buf.buffer, 0);
      expect(view.getUint64(0, true)).toEqual(0);
      buf[0] = 0xff;
      buf[1] = 0x00;
      buf[2] = 0x00;
      buf[3] = 0x00;
      buf[4] = 0x00;
      buf[5] = 0x00;
      buf[6] = 0x00;
      buf[7] = 0x00;
      expect(view.getUint64(0, true)).toEqual(255);
      buf[0] = 0xff;
      buf[1] = 0xff;
      buf[2] = 0xff;
      buf[3] = 0xff;
      buf[4] = 0xff;
      buf[5] = 0xff;
      buf[6] = 0x1f;
      buf[7] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, true))).toEqual(true);
      expect(view.getUint64(0, true)).toEqual(Number.MAX_SAFE_INTEGER);
      buf[0] = 0x00;
      buf[1] = 0x00;
      buf[2] = 0x00;
      buf[3] = 0x00;
      buf[4] = 0x00;
      buf[5] = 0x00;
      buf[6] = 0x20;
      buf[7] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, true))).toEqual(false);
    });

    test('should get Int64 value from array buffer (little endian, negative)', () => {
      const buf = new Uint8Array(8);
      let view = new DataView64(buf.buffer, 0);
      expect(view.getInt64(0, true)).toEqual(0);
      buf[0] = 0xff;
      buf[1] = 0xff;
      buf[2] = 0xff;
      buf[3] = 0xff;
      buf[4] = 0xff;
      buf[5] = 0xff;
      buf[6] = 0xff;
      buf[7] = 0xff;
      expect(view.getInt64(0, true)).toEqual(-1);
      buf[0] = 0x00;
      buf[1] = 0xff;
      buf[2] = 0xff;
      buf[3] = 0xff;
      buf[4] = 0xff;
      buf[5] = 0xff;
      buf[6] = 0xff;
      buf[7] = 0xff;
      expect(view.getInt64(0, true)).toEqual(-256);
      buf[0] = 0x01;
      buf[1] = 0x00;
      buf[2] = 0x00;
      buf[3] = 0x00;
      buf[4] = 0x00;
      buf[5] = 0x00;
      buf[6] = 0xe0;
      buf[7] = 0xff;
      expect(Number.isSafeInteger(view.getInt64(0, true))).toEqual(true);
      expect(view.getInt64(0, true)).toEqual(Number.MIN_SAFE_INTEGER);
      buf[0] = 0x00;
      buf[1] = 0x00;
      buf[2] = 0x00;
      buf[3] = 0x00;
      buf[4] = 0x00;
      buf[5] = 0x00;
      buf[6] = 0xe0;
      buf[7] = 0xff;
      expect(Number.isSafeInteger(view.getInt64(0, true))).toEqual(false);
    });

    test('should get Uint64 value from array buffer (big endian, positive)', () => {
      const buf = new Uint8Array(8);
      let view = new DataView64(buf.buffer, 0);
      expect(view.getUint64(0, false)).toEqual(0);
      buf[7] = 0xff;
      buf[6] = 0x00;
      buf[5] = 0x00;
      buf[4] = 0x00;
      buf[3] = 0x00;
      buf[2] = 0x00;
      buf[1] = 0x00;
      buf[0] = 0x00;
      expect(view.getUint64(0, false)).toEqual(255);
      buf[7] = 0xff;
      buf[6] = 0xff;
      buf[5] = 0xff;
      buf[4] = 0xff;
      buf[3] = 0xff;
      buf[2] = 0xff;
      buf[1] = 0x1f;
      buf[0] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, false))).toEqual(true);
      expect(view.getUint64(0, false)).toEqual(Number.MAX_SAFE_INTEGER);
      buf[7] = 0x00;
      buf[6] = 0x00;
      buf[5] = 0x00;
      buf[4] = 0x00;
      buf[3] = 0x00;
      buf[2] = 0x00;
      buf[1] = 0x20;
      buf[0] = 0x00;
      expect(Number.isSafeInteger(view.getUint64(0, false))).toEqual(false);
    });

    test('should get Int64 value from array buffer (big endian, negative)', () => {
      const buf = new Uint8Array(8);
      let view = new DataView64(buf.buffer, 0);
      expect(view.getInt64(0, false)).toEqual(0);
      buf[7] = 0xff;
      buf[6] = 0xff;
      buf[5] = 0xff;
      buf[4] = 0xff;
      buf[3] = 0xff;
      buf[2] = 0xff;
      buf[1] = 0xff;
      buf[0] = 0xff;
      expect(view.getInt64(0, false)).toEqual(-1);
      buf[7] = 0x00;
      buf[6] = 0xff;
      buf[5] = 0xff;
      buf[4] = 0xff;
      buf[3] = 0xff;
      buf[2] = 0xff;
      buf[1] = 0xff;
      buf[0] = 0xff;
      expect(view.getInt64(0, false)).toEqual(-256);
      buf[7] = 0x01;
      buf[6] = 0x00;
      buf[5] = 0x00;
      buf[4] = 0x00;
      buf[3] = 0x00;
      buf[2] = 0x00;
      buf[1] = 0xe0;
      buf[0] = 0xff;
      expect(Number.isSafeInteger(view.getInt64(0, false))).toEqual(true);
      expect(view.getInt64(0, false)).toEqual(Number.MIN_SAFE_INTEGER);
      buf[7] = 0x00;
      buf[6] = 0x00;
      buf[5] = 0x00;
      buf[4] = 0x00;
      buf[3] = 0x00;
      buf[2] = 0x00;
      buf[1] = 0xe0;
      buf[0] = 0xff;
      expect(Number.isSafeInteger(view.getInt64(0, false))).toEqual(false);
    });
  });
});
